@model Movies.Models.RegisterViewModel

@{
    Layout = null;
}

<!DOCTYPE html>

<html>
<head>
    <meta name="viewport" content="width=device-width" />
    <title>Register</title>
</head>
<body>
    <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css">
    <link rel="stylesheet" href="~/Content/Site.css" />
    <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.1.1/jquery.min.js"></script>
    <script src="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/js/bootstrap.min.js"></script>
    
    
    @using (Html.BeginForm()) 
    {
        @Html.AntiForgeryToken()
        
        <div class="form-horizontal center">
            <h4>Registrar usuario nuevo</h4>
            <hr />
            @Html.ValidationSummary(true, "", new { @class = "text-danger" })
            <div class="form-group formItem">                
                <div class="col-md-10">
                    @Html.EditorFor(model => model.Username, new { htmlAttributes = new { @class = "form-control transparent", @placeholder = Html.DisplayNameFor(model => model.Username) } })
                    @Html.ValidationMessageFor(model => model.Username, "", new { @class = "text-danger white" })
                </div>
            </div>

            <hr />

            <div class="form-group formItem">               
                <div class="col-md-10">
                    @Html.PasswordFor(model => model.Password, htmlAttributes: new { @class = "form-control transparent", @placeholder = Html.DisplayNameFor(model => model.Password) })
                    @Html.ValidationMessageFor(model => model.Password, "", new { @class = "text-danger white" })
                </div>
            </div>

            <hr />
    
            <div class="form-group formItem">                
                <div class="col-md-10">
                    @Html.PasswordFor(model => model.PasswordConfirmation, htmlAttributes: new { @class = "form-control transparent", @placeholder = Html.DisplayNameFor(model => model.PasswordConfirmation) })
                    @Html.ValidationMessageFor(model => model.PasswordConfirmation, "", new { @class = "text-danger white" })
                </div>
            </div>

            <hr />
    
            <div class="form-group formItem">                
                <div class="col-md-10">
                    @Html.EditorFor(model => model.Nombre, new { htmlAttributes = new { @class = "form-control transparent", @placeholder = Html.DisplayNameFor(model => model.Nombre) } })
                    @Html.ValidationMessageFor(model => model.Nombre, "", new { @class = "text-danger white" })
                </div>
            </div>
    
            <hr />

            <div class="form-group formItem">                
                <div class="col-md-10">
                    @Html.EditorFor(model => model.Apellido, new { htmlAttributes = new { @class = "form-control transparent", @placeholder = Html.DisplayNameFor(model => model.Apellido) } })
                    @Html.ValidationMessageFor(model => model.Apellido, "", new { @class = "text-danger white" })
                </div>
            </div>
    
            <hr />

            <div class="form-group formItem">                
                <div class="col-md-10">
                    @Html.EditorFor(model => model.Telefono, new { htmlAttributes = new { @class = "form-control transparent", @placeholder = Html.DisplayNameFor(model => model.Telefono) } })
                    @Html.ValidationMessageFor(model => model.Telefono, "", new { @class = "text-danger white" })
                </div>
            </div>
    
            <hr />

            <div class="form-group formItem">                
                <div class="col-md-10">
                    @Html.DropDownListFor(model => model.TipoDocumento, Model.TiposDocumento, "Tipo de documento", htmlAttributes: new { @class = "form-control transparent", @placeholder = Html.DisplayNameFor(model => model.TipoDocumento) })
                    @Html.ValidationMessageFor(model => model.TipoDocumento, "", new { @class = "text-danger white" })
                </div>
            </div>
    
            <hr />

            <div class="form-group formItem">                
                <div class="col-md-10">
                    @Html.EditorFor(model => model.NumeroDocumento, new { htmlAttributes = new { @class = "form-control transparent", @placeholder = Html.DisplayNameFor(model => model.NumeroDocumento) } })
                    @Html.ValidationMessageFor(model => model.NumeroDocumento, "", new { @class = "text-danger white" })
                </div>
            </div>
    
            <hr />

            <div class="form-group formItem">
                <div class="col-md-10">
                    @Html.EditorFor(model => model.Email, new { htmlAttributes = new { @class = "form-control transparent", @placeholder = Html.DisplayNameFor(model => model.Email) } })
                    @Html.ValidationMessageFor(model => model.Email, "", new { @class = "text-danger white" })
                </div>
            </div>
    
            <hr />

            <div class="form-group">
                <div class="col-md-10">
                    <input type="submit" value="Create" class="btn btn-default transparent button" />
                </div>
            </div>
        </div>
    }
    @Scripts.Render("~/bundles/jqueryval")
</body>
</html>